{"remainingRequest":"C:\\Users\\User\\Documents\\JATU PLC\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\User\\Documents\\JATU PLC\\frontend\\src\\api\\report.api.js","dependencies":[{"path":"C:\\Users\\User\\Documents\\JATU PLC\\frontend\\src\\api\\report.api.js","mtime":1588131452000},{"path":"C:\\Users\\User\\Documents\\JATU PLC\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Documents\\JATU PLC\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/User/Documents/JATU PLC/frontend/src/api/report.api.js"],"names":["request","url","ReportsAPI","reportID","get","response","data","post","put"],"mappings":";;;;AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,IAAMC,GAAG,GAAG,SAAZ,C,CAEA;AACA;AACA;AACA;AACA;;IAEMC,U;;;;;;;;0FAEQC,Q;;;;;;;qBACHA,Q;;;;;;uBACwBH,OAAO,CAACI,GAAR,WAAeH,GAAf,cAAsBE,QAAtB,E;;;AAAjBE,gBAAAA,Q;iDACCA,QAAQ,CAACC,I;;;;uBAEON,OAAO,CAACI,GAAR,CAAYH,GAAZ,C;;;AAAjBI,gBAAAA,S;iDACCA,SAAQ,CAACC,I;;;;;;;;;;;;;;;;;;;8FAIXA,I;;;;;;;uBACcN,OAAO,CAACO,IAAR,WAAgBN,GAAhB,cAA8BK,IAA9B,C;;;AAAjBD,gBAAAA,Q;kDACCA,QAAQ,CAACC,I;;;;;;;;;;;;;;;;;;;8FAGPH,Q,EAAUG,I;;;;;;;uBACIN,OAAO,CAACQ,GAAR,WAAeP,GAAf,qBAA6BE,QAA7B,GAAyCG,IAAzC,C;;;AAAjBD,gBAAAA,Q;kDACCA,QAAQ,CAACC,I;;;;;;;;;;;;;;;;;;;+FAGPH,Q;;;;;;;uBACcH,OAAO,UAAP,WAAkBC,GAAlB,cAAyBE,QAAzB,a;;;AAAjBE,gBAAAA,Q;kDACCA,QAAQ,CAACC,I;;;;;;;;;;;;;;;;;;;kGAGHH,Q,EAAUG,I;;;;;;;uBACAN,OAAO,CAACQ,GAAR,WAAeP,GAAf,0BAAkCE,QAAlC,GAA8CG,IAA9C,C;;;AAAjBD,gBAAAA,Q;kDACCA,QAAQ,CAACC,I;;;;;;;;;;;;;;;;;;;qGAGAH,Q,EAAUG,I;;;;;;;uBACHN,OAAO,CAACQ,GAAR,WAAeP,GAAf,6BAAqCE,QAArC,GAAiDG,IAAjD,C;;;AAAjBD,gBAAAA,Q;kDACCA,QAAQ,CAACC,I;;;;;;;;;;;;;;;;;;;;;AAKxB,eAAgB,IAAIJ,UAAJ,EAAhB","sourcesContent":["import request from './index';\n\nconst url = '/report'\n\n// request.interceptors.request.use(function(config){\n//     const token = localStorage.getItem('token')\n//     config.headers['Authorization'] = `Bearer ${token}`\n//     return config\n// })\n\nclass ReportsAPI{\n\n    async get(reportID){\n        if(reportID){\n            const response = await request.get(`${url}/${reportID}`)\n            return response.data\n        }else{\n            const response = await request.get(url)\n            return response.data\n        }\n    }\n\n    async create(data){\n        const response = await request.post(`${url}/create`, data)\n        return response.data\n    }\n\n    async update(reportID, data){\n        const response = await request.put(`${url}/update/${reportID}`, data)\n        return response.data\n    }\n\n    async delete(reportID){\n        const response = await request.delete(`${url}/${reportID}/delete`)\n        return response.data\n    }\n\n    async addComment(reportID, data){\n        const response = await request.put(`${url}/add-comment/${reportID}`, data)\n        return response.data\n    }\n\n    async removeComment(reportID, data){\n        const response = await request.put(`${url}/remove-comment/${reportID}`, data)\n        return response.data\n    }\n}\n\n\nexport default  new ReportsAPI();"]}]}